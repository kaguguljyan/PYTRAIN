import unittest  # импортируем модуль для создания и запуска тестов
import logging  # импортируем модуль для логирования событий
from W06_T05 import (
    add_note,
    show_notes,
    save_notes,
)  # импортируем функции для работы с заметками

# настройка логирования (уровень INFO и формат сообщения)
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


# определяем класс тестов, наследующий от unittest.TestCase
class TestNotesManagerSimple(unittest.TestCase):

    def test_add_note(self):  # метод для тестирования добавления заметки
        notes = []  # создаем пустой список заметок
        logging.info("Тестируем добавление заметки")  # логируем начало теста
        add_note(
            notes, "Заголовок", "Текст заметки"
        )  # вызываем функцию добавления заметки

        # проверяем, что заметка добавлена в список
        self.assertEqual(len(notes), 1)  # убеждаемся, что в списке одна заметка
        self.assertEqual(notes[0]["title"], "Заголовок")  # проверяем заголовок заметки
        self.assertEqual(notes[0]["text"], "Текст заметки")  # проверяем текст заметки
        logging.info("Заметка успешно добавлена")  # логируем успешное добавление

    def test_show_notes_empty(
        self,
    ):  # метод для тестирования отображения пустого списка заметок
        notes = []  # создаем пустой список заметок
        logging.info(
            "Тестируем отображение пустого списка заметок"
        )  # логируем начало теста
        show_notes(notes)  # вызываем функцию отображения заметок
        logging.info(
            "Отображение пустого списка завершено"
        )  # логируем завершение теста

    def test_show_notes_not_empty(
        self,
    ):  # метод для тестирования отображения непустого списка заметок
        notes = [
            {"title": "Заголовок", "text": "Текст заметки"}
        ]  # создаем список с одной заметкой
        logging.info(
            "Тестируем отображение непустого списка заметок"
        )  # логируем начало теста
        show_notes(notes)  # вызываем функцию отображения заметок
        logging.info(
            "Отображение непустого списка завершено"
        )  # логируем завершение теста

    def test_save_notes(self):  # метод для тестирования сохранения заметок
        notes = [
            {"title": "Заголовок", "text": "Текст заметки"}
        ]  # создаем список с одной заметкой
        logging.info("Тестируем сохранение заметок")  # логируем начало теста
        save_notes(notes)  # вызываем функцию сохранения заметок
        logging.info(
            "Сохранение завершено, файл создан или перезаписан"
        )  # логируем завершение теста


# проверяем, запущен ли скрипт как основная программа
if __name__ == "__main__":
    unittest.main()  # запускаем все тесты
